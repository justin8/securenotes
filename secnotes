#!/bin/bash
MASTER_KEY='6D806CDF'
SETTINGS=~/.config/secnotes/config
KEYSTORE_LOCATION="${SETTINGS%/*}/keystore"
# Expected variables from settings:
# SECRET_KEY_ID - the key ID to use for this user
# EMAIL - email of the generated key. Used for all encryption/decryption
# KEYSTORE - git repository of email/fingerprint pairs to trust
SECRET_KEY_ID=''
EMAIL=''
if [[ -f $SETTINGS ]]; then
	while read -r line; do declare $line; done < $SETTINGS
fi

r() { tput setaf 1; tput bold; }
g() { tput setaf 2; tput bold; }
y() { tput setaf 3; tput bold; }
b() { tput setaf 4; tput bold; }
c() { tput sgr0; }
error() { echo "$(r)Error$(c): $*" >&2; }
warning() { echo "$(y)Warning$(c): $*" >&2; }
success() { echo "$(g)Success$(c): $*" >&2; }

# Handle updates at the start; less things to break beforehand if we need to push updates
if [[ $1 == 'update' ]]; then
	shift
	DIR="$(dirname "$0")"
	UPDATE="$(git -C "$DIR" pull 2>&1)"
	rc=$?
	if [[ $rc == 0 ]]; then
		if [[ $UPDATE != 'Already up-to-date.' ]]; then
			success 'Updated to latest version!'
		else
			success "$UPDATE" >&2
		fi
	else
		error "Failed to update!"
		echo "$UPDATE" >&2
	fi
	exit $rc
fi

# Outputs the OS name. No inputs
detect_os() {
	uname -a | grep -qi darwin 2>/dev/null && echo mac && return 0
	grep -qi 'arch' /etc/os-release 2>/dev/null && echo arch && return 0
	grep -qiE '(ubuntu|debian)' /etc/os-release 2>/dev/null && echo ubuntu && return 0
	return 1
}

# Install packages if required. Uses which to detect binary, then installs the
# correct package depending on the OS. A blank package name means it won't be
# installed for that OS
# $1 - Binary to check for with which
# $2 - Arch Linux package name
# $3 - Debian/Ubuntu package name
# $4 - OS X Brew package name
install_package() {
	local CHECK=$1
	local ARCH=$2
	local DEBIAN=$3
	local MAC=$4
	local OS="$(detect_os)"

	[[ -z $OS ]] && error 'Unable to detect OS!' && return 1

	# Skip if package isn't defined for this OS
	[[ $OS == 'arch' ]] && [[ -n $ARCH ]] && return 0
	[[ $OS == 'debian' ]] && [[ -n $DEBIAN ]] && return 0
	[[ $OS == 'mac' ]] && [[ -n $MAC ]] && return 0

	# check set status
	#reset it afterwards?
	errexit=$(set -o | grep -q 'errexit.*on' && echo '-e' || echo '+e')
	set +e
	if ! which "$CHECK" &>/dev/null; then
		if [[ $OS == 'arch' ]]; then
			[[ $ARCH ]] && pacman -Sy --noconfirm $ARCH
		fi

		if [[ $OS == 'debian' ]]; then
			[[ $DEBIAN ]] && apt-get install -y $DEBIAN
		fi

		if [[ $OS == 'mac' ]]; then
			[[ $MAC ]] && brew install $MAC
		fi
	fi

	which "$CHECK" &>/dev/null && return 0
	set $errexit
	return 1
}

# Detect and install packages if necessary
init() {
	local GPG_OUT
	mkdir -p "$(dirname "$SETTINGS")"

	# Install brew on OS X
	if uname -a | grep -qi darwin; then
		if ! which brew &> /dev/null; then
			ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
			brew doctor
		fi
	fi

	set -e
	install_package gpg gnupg gnupg gnupg
	install_package tput ncurses ncurses-bin ''
	install_package clipit clipit clipit ''
	set +e

	# Trust master key
	if ! gpg2 --list-keys 2>&1 | grep -q $MASTER_KEY; then
		warning "Master key not found. Downloading..."
		GPG_OUT=$(gpg2 --recv-key $MASTER_KEY 2>&1)
		rc=$?
		[[ $rc -ne 0 ]] && error "Failed retrieving master key!" && echo "$GPG_OUT" && exit $rc
	fi

	if ! gpg2 --list-keys --list-options show-uid-validity 2>&1 | grep -a1 $MASTER_KEY | grep -q 'ultimate'; then
		warning "Master key not ultimately trusted. Fixing..."
		OWNERTRUST=$(gpg2 --list-keys --with-fingerprint --with-colons 2>&1 | grep -B1 'ops@c9.io' | head -n1 | tr -s : : | cut -d: -f2):6:
		GPG_OUT=$(gpg2 --import-ownertrust <<<"$OWNERTRUST" 2>&1)
		[[ $? -ne 0 ]] && error "Failed to trust master key!" && echo "$GPG_OUT" && exit 1
	fi
}

update_keystore() {
	echo 'Updating keystore...' >&2
	if [[ -d $KEYSTORE_LOCATION ]]; then
		git -C "$KEYSTORE_LOCATION" fetch --all &>/dev/null
		git -C "$KEYSTORE_LOCATION" reset --hard &>/dev/null
		git -C "$KEYSTORE_LOCATION" checkout master &>/dev/null
		git -C "$KEYSTORE_LOCATION" reset --hard origin/master &>/dev/null
	fi
}

# $1 - Key ID
# stdin - output from --list-keys or --list-secret-keys
grep_email() {
	grep -A2 "$1" | grep uid | sed -E 's/.*<(.*)>.*$/\1/'
}

# Works on Linux and OS X
# Outputs contents of clipboard
# Returns 0 when there is data
# Returns 1 when nothing was in the clipboard or an error
get_clipboard() {
	if [[ $(detect_os) == 'mac' ]]; then
		out=$(pbpaste 2>/dev/null)
	else
		out=$(clipit -c 2>/dev/null)
	fi
	[[ -z $out ]] && return 1
	echo "$out"; return 0
}

# Works on Linux and OS X
# $1 - Contents to put in clipboard
# Returns code from clipboard manager
# TODO: Test retcodes for pbcopy
set_clipboard() {
	local clipboard

	if [[ $(detect_os) == 'mac' ]]; then
		clipboard=pbcopy
	else
		clipboard=clipit
	fi
	echo "$1" | $clipboard &>/dev/null
	rc=$?
	[[ $rc -eq 0 ]] && success 'The message has been successfully copied to your clipboard'
	return $rc
}

# Accepts an unknown input; it could be an email or a key id or neither.
# This function returns a Key ID of the email, or the input if it is a valid
# Key ID already, or blank if it is neither.
# $1 - Anything! works best with emails/key IDs
find_key_id() {
	local INPUT=$1
	local OUTPUT_KEYID

	# Check if input is an email
	OUTPUT_KEYID=$(get_keyid_from_email "$1" 2>/dev/null)
	[[ $OUTPUT_KEYID ]] && echo "$OUTPUT_KEYID" && return 0

	# Check if input is a Key ID
	OUTPUT_KEYID=$(get_public_key "$1" 2>/dev/null)
	[[ $? -eq 0 ]] && echo "$1" && return 0

	return 1
}

# Uses SECRET_KEY_ID and EMAIL from config file
check_for_secret_key() {
	[[ -z $EMAIL ]] && return 1
	[[ -z $SECRET_KEY_ID ]] && return 1

	GPG_EMAIL=$(gpg2 --list-secret-keys 2>&1 | grep_email $SECRET_KEY_ID)
	[[ $GPG_EMAIL == "$EMAIL" ]] && return 0
	return 1
}

# Asks the user for a password until they can enter one correctly twice in a row
# Returns the password on stdout
ask_passphrase() {
	local passphrase1
	local passphrase2

	# Outputs the passphrase if it was entered twice correctly
	# Otherwise returns 1 and a blank string
	passphrase_loop_function() {
		echo -n 'Please enter a password for your new key: ' >&2
		read -s passphrase1
		echo >&2
		echo -n 'Please re-enter your password: ' >&2
		read -s passphrase2
		echo >&2

		if [[ $passphrase1 == "$passphrase2" ]]; then
			echo "$passphrase1"
			return 0
		else
			return 1
		fi
	}

	passphrase=$(passphrase_loop_function)
	rc=$?

	while [[ $rc -ne 0 ]]; do
		error 'Passphrases do not match. Please try again'
		passphrase=$(passphrase_loop_function)
		rc=$?
	done

	echo "$passphrase"
}

# Use GPG to generate a key and store the key variables for later use
generate_key() {
	local NAME
	local EMAIL
	local PASSPHRASE

	[[ ! -d $KEYSTORE_LOCATION ]] && error 'Please specify a keystore repository before generating your key' && exit 1
	if check_for_secret_key; then
		echo "A key has already been generated. Are you sure you want to continue? [y/N]"
		read -r response
		case $response in
			y|Y)echo '';;
			*)exit 1;;
		esac
	fi

	# TODO: Use a key settings file with --gen-key --batch over stdin to support old gpg on Ubuntu/OSX
	# use `read -s variable` for it
	# As for real name
	# ask for email
	# ask for password
	# confirm password; how to retry? while loop?
	echo -n 'Please enter your full name: ' >&2
	read NAME
	echo -n 'Please enter your email address: ' >&2
	read EMAIL

	EMAIL=$(tr '[:upper:]' '[:lower:]' <<<"$EMAIL")
	PASSPHRASE=$(ask_passphrase)

	# Create text to send to gpg
	batch_string=$(cat <<-EOF
		Key-Type: default
		Key-Length: 4096
		Subkey-Type: default
		Expire-Date: 0
		Name-Real: $NAME
		Name-Email: $EMAIL
		Passphrase: $PASSPHRASE
		%commit
		EOF
		)

	echo 'Generating key. Please wait... ' >&2
	GPG_OUT=$(gpg2 --gen-key --batch 2>&1 <<<"$batch_string")
	[[ $? -ne 0 ]] && error 'Failed to generate key!' && echo "$NEW_KEY" 2>&1 && exit 1
	SECRET_KEY_ID="$(grep -Eo 'key [A-Z0-9]+ ' <<<"$GPG_OUT" | cut -d' ' -f2)"

	GPG_OUT=$(gpg2 --send-key "$SECRET_KEY_ID" 2>&1)
	rc=$?
	# TODO: Cleanup after failure to upload?
	[[ $rc -ne 0 ]] && error 'Failed to upload key to server!' && echo "$GPG_OUT" && return $rc

	# Attempt to silently clear branches of the existing name before doing set -e
	git -C "$KEYSTORE_LOCATION" branch -D "$EMAIL"
	set -e
	trap 'error Failed to upload new key to keystore' SIGQUIT SIGINT SIGTERM EXIT
	# Save key to repo and push in a branch
	echo "$SECRET_KEY_ID" > "$KEYSTORE_LOCATION/$EMAIL"
	git -C "$KEYSTORE_LOCATION" checkout -b "$EMAIL"
	git -C "$KEYSTORE_LOCATION" add "$EMAIL"
	git -C "$KEYSTORE_LOCATION" config user.email "$EMAIL"
	git -C "$KEYSTORE_LOCATION" config user.name "$(gpg --list-secret-keys|grep -A1 "$SECRET_KEY_ID"|grep uid|sed -r 's/.*uid\s*(\[.*\] )?([a-zA-Z ]*) <.*/\2/')"
	git -C "$KEYSTORE_LOCATION" commit -m "New key for $EMAIL"
	git -C "$KEYSTORE_LOCATION" push --set-upstream origin HEAD
	git -C "$KEYSTORE_LOCATION" checkout master
	trap - SIGQUIT SIGINT SIGTERM EXIT
	set +e

	# Save settings for future use
	echo "SECRET_KEY_ID=$SECRET_KEY_ID" > "$SETTINGS"
	echo "EMAIL=$EMAIL" >> "$SETTINGS"
	success "The new key has been generated and saved successfully"
	return 0
}

# Returns a Key ID for a given email address. Only looks in the keystore repository
# Returns 0 and the Key ID when successful, 1 and a blank string on failure
# $1 - Email address to find the Key ID for.
get_keyid_from_email() {
	local TARGET="$(tr '[:upper:]' '[:lower:]' <<<"$1")"
	local fullname="$KEYSTORE_LOCATION/$TARGET"
	local shortname="$(find "$KEYSTORE_LOCATION" -maxdepth 1 -iname "$TARGET*")"

	# keystore lookup
	for file in $fullname $shortname; do
		[[ -f $file ]] && cat "$file" && return 0
	done

	# TODO: Implement remote keystore lookup here after falling through local checks
	# Don't error yet; just let calling function know it couldn't find an ID and return ''
	#error 'Failed to find key locally. Remote lookups coming soon'
	return 1
}

# Retrieve a specified Key ID from the key servers. Returns 0 if the key is
# available regardless of whether it pulled a new version of the key or uses cache
# Returns 0 if the key was found successfully; 1 if it was not.
# $1 - Key ID to retrieve
get_public_key() {
	local GPG_OUT
	local rc=0
	local KEYID="$1"

	GPG_OUT=$(gpg2 --recv-key "$KEYID" 2>&1)
	rc=$?

	if gpg --list-keys | grep -q "$KEYID"; then
		if [[ $rc -eq 0 ]]; then
			return 0
		else
			warning 'Failed to update key. Falling back to local cache.'
			rc=0
		fi
	else
		error 'Failed to retrieve key'
	fi
	echo "$GPG_OUT" >&2
	return $rc
}

# Encrypts a message
# $1 - Key ID to encrypt message for
# $1 - Message to be encrypted
# Outputs to clipboard and terminal
# TODO: Only put on clipboard if under some size?
encrypt_message() {
	GPG_OUT=''
	GPG_ERR=''
	local RECIPIENT_KEYID=$1
	local MESSAGE=$2
	local rc=0

	[[ -z $RECIPIENT_KEYID ]] && error "No recipient specified! This shouldn't happen." && exit 1
	[[ -z $MESSAGE ]] && error "No message specified! This shouldn't happen." && exit 1

	update_keystore

	get_public_key "$RECIPIENT_KEYID"
	[[ $? -ne 0 ]] && exit 1


	handler() {
		rm $GPG_ERR
	}

	GPG_ERR="$(mktemp -t "$(basename $0).XXXXXXXX")"
	trap handler EXIT SIGINT SIGQUIT SIGTERM
	GPG_OUT="$(gpg2 -u "$SECRET_KEY_ID" -r "$RECIPIENT_KEYID" --armor --encrypt 2>"$GPG_ERR" <<<"$MESSAGE")"

	if [[ $rc -ne 0 ]]; then
		error "Failed to encrypt message!"
		echo "$GPG_OUT" >&2
		cat "$GPG_ERR" >&2
	else
		echo "This message can only be read by: $(gpg --list-keys | grep_email "$RECIPIENT_KEYID") - $RECIPIENT_KEYID" >&2
		set_clipboard "$GPG_OUT"
		echo >&2
		echo "$GPG_OUT"
	fi

	return $rc
}

# Decrypts a message
# $1 - Message to be decrypted
# Outputs to clipboard and terminal
# Returns 0 on success, 1 on error
# TODO: Only put on clipboard if under some size?
decrypt_message() {
	GPG_ERR=''
	GPG_OUT=''
	local MESSAGE="$1"
	local rc=0

	if ! check_for_secret_key; then
		error "You must generate a key before being able to decrypt"
		exit 1
	fi

	[[ -z $MESSAGE ]] && error "No messsage specified! This shouldn't happen." && exit 1

	GPG_ERR="$(mktemp -t "$(basename $0).XXXXXXXX")"
	handler() {
		rm -f "$GPG_ERR"
	}

	trap handler EXIT SIGINT SIGQUIT SIGTERM
	GPG_OUT="$(gpg 2>"$GPG_ERR" <<<"$MESSAGE")"
	rc=$?

	if [[ $rc -ne 0 ]]; then
		error "Failed to decrypt message!"
		echo "$GPG_OUT" >&2
		cat "$GPG_ERR" >&2
	else
		set_clipboard "$GPG_OUT"
		echo >&2
		echo "$GPG_OUT"
	fi

	return $rc
}

# Set a git repo to use for validating fingerprints
# $1 - keystore git repo; can be a github short name or a full git URI
set_keystore() {
	local GIT_OUT
	local KEYSTORE=$1
	[[ -z $KEYSTORE ]] && error "No keystore specified! This shouldn't happen" && exit 1
	if [[ -d $KEYSTORE_LOCATION ]]; then
		error "A keystore has already been specified. Are you sure you wish to overwrite it? [y/N]"
		read -r response
		case $response in
			y|Y)echo '';;
			*)exit 1;;
		esac
		rm -rf "$KEYSTORE_LOCATION"
	fi

	handler() {
		error 'Failed to sync keystore!'
		echo "$GIT_OUT"
		exit 1
	}

	set -e
	trap handler SIGTERM SIGINT SIGQUIT EXIT
	# Github shortname handling
	if ! [[ $KEYSTORE =~ (@|:) ]]; then
		KEYSTORE="git@github.com:$KEYSTORE"
	fi
	GIT_OUT=$(git clone "$KEYSTORE" "$KEYSTORE_LOCATION" 2>&1)

	set +e
	trap - SIGTERM SIGINT SIGQUIT EXIT
	success 'Synced keystore.'
	return 0
}

usage() {
	local NAME="$(basename "$0")"
	cat <<-EOF
	Usage: $NAME (ID|file|generate-key|set-keystore|help)

	This tool will try to figure out what you are intending to do by what data you put in
	No flags are necessary. Data can be provided by the clipboard, typing in manually,
	via pipes with stdin or a file. In order to encrypt data the identity of a person is
	required, as well as a message to encrypt. Please see the examples below.

	$(y)NOTE$(c): All data is output to the console on stdout as well as to your clipboard if it is accessible.
	$(y)NODE$(c): An ID can be any of the following:
	  - A full email address
	  - The start of a person's email address (e.g. 'justin' will match 'justin@c9.io')
	  - A GPG key ID (This can be used to send to people not registered in the keystore)

	Options:
	 help                Show this Help
	 generate-key        Generate a key pair; This should only be needed once
	 set-keystore        Set a git repo as the keystore for verifying key IDs

	Examples:
	Decrypting data:
	  From the clipboard:
	  $NAME

	  From a file:
	  $NAME ENCRYPTED_FILE

	  From stdin:
	  echo '[ENCRYPTED DATA]' | $NAME

	Encrypting data:
	  From the clipboard:
	  $NAME ID

	  From a file:
	  $NAME ID UNENCRYPTYED_FILE
	  OR
	  $NAME UNENCRYPTED_FILE ID

	  From stdin:
	  echo '[ DATA TO BE ENCRYPTED ]' | $NAME
	EOF
}

init

case $1 in
	-h|--help|help) usage; exit 0 ;;
	set-keystore) set_keystore "$2"; exit $? ;;
	generate-key) generate_key; exit $? ;;
esac

invalid_parameters() {
	error "Invalid parameters"
	usage
	exit 1
}

# Usage logic begins here

if [[ $2 ]]; then
# $2 is specified, this must be an encryption workflow with a file
# decryption needs max 1 parameter, adn encryption only needs 2 if it is a file
	if [[ -f $2 ]]; then
		# $2 is a file; $1 must be a keyid/email/similar; check if it is
		RECIPIENT_KEYID="$(find_key_id "$1")"
		if [[ $? -eq 0 ]]; then
			# $1 is a valid email, name or key, and $2 is a file
			encrypt_message "$RECIPIENT_KEYID" "$(cat "$2")"
			exit $?
		fi
		# $2 is a file; $1 is not an email, name or valid key ID
		invalid_parameters
	else
		# 2 parameters, but $2 is not a file
		if [[ -f $1 ]]; then
			# $1 is a file; $2 must be a keyid/email/name; check if it is
			RECIPIENT_KEYID="$(find_key_id "$2")"
			if [[ -n $RECIPIENT_KEYID ]]; then
				encrypt_message "$RECIPIENT_KEYID" "$(cat "$1")"
				exit $?
			fi
			# $1 is a file; $2 is not an email, name or valid key ID
			invalid_parameters
		else
			# 2 parameters, neither are files
			invalid_parameters
		fi
	fi
fi

# At this point, $2 cannot be specified; Let's determine what flow this is
if [[ $1 ]]; then
	# $1 is a file, no other information; it must be encrypted
	# This will also exit 1 if it was not decryptable but is a file
	if [[ -f $1 ]]; then
		decrypt_message "$(cat "$1")"
		exit $?
	fi

	# Get the key id from $1 out here
	RECIPIENT_KEYID="$(find_key_id "$1")"

	# Check for stdin; this might be a key we are encrypting to
	if ! [[ -t 0 ]]; then
		# stdin has text, and $1 might be a key;
		# TODO: Should we check at this point if stdin is encrypted or not. Need to peek at pipe for this
		# TODO: If it is encrypted, do a decrypt here, fall back to encryption
		# TODO: For now assume it needs encrypting
		if [[ -n $RECIPIENT_KEYID ]]; then
			# encrypt stdin with the ID specified by $1
			encrypt_message "$RECIPIENT_KEYID" "$(cat)"
			exit $?
		fi
	fi

	if [[ -n $RECIPIENT_KEYID ]]; then
		# $1 is a valid ID and no other input given. We'll encrypt the clipboard contents if it exists
		clipboard=$(get_clipboard)
		if [[ $clipboard ]]; then
			success 'Found data on clipboard. Encrypting...'
			encrypt_message "$RECIPIENT_KEYID" "$clipboard"
			exit $?
		fi

		# $1 is a valid ID, and there is no other input or even valid clipboard data; wait for pasted data
		echo "Please paste the message to be encrypted below. press ctrl+D to end the message:" >&2
		INPUT="$(cat)"
		echo >&2
		echo ---------------------------------------------------------------- >&2
		echo >&2
		echo "$(b)Encrypted message$(c):" >&2
		encrypt_message "$RECIPIENT_KEYID" "$INPUT"
		exit $?
	fi

	# $1 is not a key ID or a file; there may be data on stdin, but it must be an error
	# TODO: Update this note once we decrypt regardless of extra data on $1
	invalid_parameters
fi

# No parameters; lets figure out what is on the clipboard, and what is on stdin
if ! [[ -t 0 ]]; then
	# data on stdin; no keys specified; must be decryption workflow
	decrypt_message "$(cat)"
	exit $?
fi

# Fall back to checking clipboard for data to decrypt as no parameters were specified
clipboard=$(get_clipboard)
if grep -q -- '-----BEGIN PGP MESSAGE' <<<"$clipboard"; then
	success 'Found encrypted data on clipboard. Decrypting'
	# Found valid data to decrypt on the clipboard
	decrypt_message "$clipboard"
	exit $?
fi

# Enter data to decrypt!!
INPUT=''
echo "Please paste the message to be decrypted below:"
while read -r line; do
	[[ -z $INPUT ]] && INPUT="$line" || INPUT="$INPUT"$'\n'"$line"
	[[ $line == '-----END PGP MESSAGE-----' ]] && break
done
OUT=$(decrypt_message "$INPUT")
rc=$?
if [[ -n $OUT ]]; then
	echo >&2
	echo ---------------------------------------------------------------- >&2
	echo >&2
	echo "$(b)Decrypted message$(c):" >&2
	echo "$OUT"
fi
exit $rc
